generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  email      String     @unique
  password   String
  isActive   Boolean    @default(true)
  bookmarks  Bookmark[]
  categories Category[]
  session    Session?
  contacts   Contact[]

  @@index([email])
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  token     String   @unique
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
}

model RegistrationRequest {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  email            String   @unique
  password         String
  verificationCode String   @db.VarChar(6)

  @@index([email])
}

model PasswordRecoveryRequest {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  email            String   @unique
  verificationCode String   @db.VarChar(6)

  @@index([email])
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  isDefault Boolean    @default(false)
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  Bookmark  Bookmark[]
  user      User       @relation(fields: [userId], references: [id])

  @@unique([userId, name])
}

model Bookmark {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  categoryId  Int
  userId      Int
  title       String
  description String?
  url         String
  category    Category @relation(fields: [categoryId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, url])
  @@unique([userId, title])
}

model Contact {
  id         String   @id @default(uuid())
  externalId String?  @unique
  userId     Int
  name       String
  birthday   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, externalId])
}
