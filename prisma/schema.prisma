// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  email      String     @unique
  password   String
  isActive   Boolean    @default(true)
  session    Session?
  categories Category[]

  @@index([email])
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
}

model RegistrationRequest {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  email            String   @unique
  verificationCode String   @db.VarChar(6)

  @@index([email])
}

model PasswordRecoveryRequest {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  email            String   @unique
  verificationCode String   @db.VarChar(6)

  @@index([email])
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  name      String
  isDefault Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  @@unique([userId, name])
}
